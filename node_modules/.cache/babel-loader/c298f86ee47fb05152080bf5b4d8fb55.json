{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\sandr\\\\OneDrive\\\\Desktop\\\\bookstore\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nexport const addBook = book => {\n  return (dispatch, getState, {\n    getFirebase,\n    getFirestore\n  }) => {\n    //make call to database\n    const firestore = getFirestore();\n    const profile = getState().firestore.collection('books').add(_objectSpread({}, book, {\n      postedBy: 'Geogi Sokol',\n      userId: '12345678',\n      createdAt: new Date()\n    })).then(() => {\n      dispatch({\n        type: 'ADD_NEW_BOOK',\n        book\n      });\n    }).catch(error => {\n      dispatch({\n        type: 'ADD_BOOK_ERROR',\n        error\n      });\n    });\n  };\n};","map":{"version":3,"sources":["C:\\Users\\sandr\\OneDrive\\Desktop\\bookstore\\src\\store\\actions\\bookActions.js"],"names":["addBook","book","dispatch","getState","getFirebase","getFirestore","firestore","profile","collection","add","postedBy","userId","createdAt","Date","then","type","catch","error"],"mappings":";;;;;;AAAA,OAAO,MAAMA,OAAO,GAAIC,IAAD,IAAU;AAC7B,SAAO,CAACC,QAAD,EAAWC,QAAX,EAAqB;AAAEC,IAAAA,WAAF;AAAeC,IAAAA;AAAf,GAArB,KAAuD;AAC1D;AACA,UAAMC,SAAS,GAAGD,YAAY,EAA9B;AACA,UAAME,OAAO,GAAGJ,QAAQ,GACxBG,SADgB,CACNE,UADM,CACK,OADL,EACcC,GADd,mBAETR,IAFS;AAGZS,MAAAA,QAAQ,EAAE,aAHE;AAIZC,MAAAA,MAAM,EAAE,UAJI;AAKZC,MAAAA,SAAS,EAAE,IAAIC,IAAJ;AALC,QAMbC,IANa,CAMR,MAAM;AACVZ,MAAAA,QAAQ,CAAC;AACLa,QAAAA,IAAI,EAAE,cADD;AAELd,QAAAA;AAFK,OAAD,CAAR;AAIH,KAXe,EAWbe,KAXa,CAWNC,KAAD,IAAW;AAChBf,MAAAA,QAAQ,CAAC;AACLa,QAAAA,IAAI,EAAE,gBADD;AAELE,QAAAA;AAFK,OAAD,CAAR;AAIH,KAhBe,CAAhB;AAiBH,GApBD;AAqBH,CAtBM","sourcesContent":["export const addBook = (book) => {\r\n    return (dispatch, getState, { getFirebase, getFirestore }) => {\r\n        //make call to database\r\n        const firestore = getFirestore()\r\n        const profile = getState().\r\n        firestore.collection('books').add({\r\n            ...book, \r\n            postedBy: 'Geogi Sokol',\r\n            userId: '12345678',\r\n            createdAt: new Date()\r\n        }).then(() => {\r\n            dispatch({\r\n                type: 'ADD_NEW_BOOK',\r\n                book\r\n            })\r\n        }).catch((error) => {\r\n            dispatch({\r\n                type: 'ADD_BOOK_ERROR',\r\n                error\r\n            })\r\n        }) \r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}